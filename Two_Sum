#### Brut force ####

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[j] == target - nums[i]:
                    return [i, j]

#Complexity Analysis

#Time complexity: O(n2).
#For each element, we try to find its complement by looping through the rest of the array which takes O(n) time. Therefore, the time complexity is O(n2).

#Space complexity: O(1).
#The space required does not depend on the size of the input array, so only constant space is used.

#########################################################################################################
#### Hashmap ####
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashmap = {}
        for i in range(len(nums)):
            hashmap[nums[i]] = i
        for i in range(len(nums)):
            comp = target - nums[i]
            if comp in hashmap and hashmap[comp] != i:
                return [i, hashmap[comp]]

#Time complexity: O(n).
#We traverse the list containing n elements exactly twice. Since the hash table reduces the lookup time to O(1), the overall time complexity is O(n).

#Space complexity: O(n).
#The extra space required depends on the number of items stored in the hash table, which stores exactly n elements.

#####################################################################################################################
############ One time pass Hashmap ##############

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashmap = {}
        for i in range(len(nums)):
            comp = target - nums[i]
            if comp in hashmap:
                return [i, hashmap[comp]]
            hashmap[nums[i]] = i

#Time complexity: O(n).
#We traverse the list containing n elements only once. Each lookup in the table costs only O(1) time.

#Space complexity: O(n).
#The extra space required depends on the number of items stored in the hash table, which stores at most n elements.
